/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TestImport } from './routes/test'
import { Route as RegisterImport } from './routes/register'
import { Route as QuickListImport } from './routes/quickList'
import { Route as RegisterPersonalInfoImport } from './routes/register/personalInfo'
import { Route as RegisterDisplaySettingsImport } from './routes/register/displaySettings'
import { Route as RegisterContractImport } from './routes/register/contract'
import { Route as RegisterCommunicationPreferencesImport } from './routes/register/communicationPreferences'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const TestRoute = TestImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRoute,
} as any)

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const QuickListRoute = QuickListImport.update({
  id: '/quickList',
  path: '/quickList',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const RegisterPersonalInfoRoute = RegisterPersonalInfoImport.update({
  id: '/personalInfo',
  path: '/personalInfo',
  getParentRoute: () => RegisterRoute,
} as any)

const RegisterDisplaySettingsRoute = RegisterDisplaySettingsImport.update({
  id: '/displaySettings',
  path: '/displaySettings',
  getParentRoute: () => RegisterRoute,
} as any)

const RegisterContractRoute = RegisterContractImport.update({
  id: '/contract',
  path: '/contract',
  getParentRoute: () => RegisterRoute,
} as any)

const RegisterCommunicationPreferencesRoute =
  RegisterCommunicationPreferencesImport.update({
    id: '/communicationPreferences',
    path: '/communicationPreferences',
    getParentRoute: () => RegisterRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/quickList': {
      id: '/quickList'
      path: '/quickList'
      fullPath: '/quickList'
      preLoaderRoute: typeof QuickListImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestImport
      parentRoute: typeof rootRoute
    }
    '/register/communicationPreferences': {
      id: '/register/communicationPreferences'
      path: '/communicationPreferences'
      fullPath: '/register/communicationPreferences'
      preLoaderRoute: typeof RegisterCommunicationPreferencesImport
      parentRoute: typeof RegisterImport
    }
    '/register/contract': {
      id: '/register/contract'
      path: '/contract'
      fullPath: '/register/contract'
      preLoaderRoute: typeof RegisterContractImport
      parentRoute: typeof RegisterImport
    }
    '/register/displaySettings': {
      id: '/register/displaySettings'
      path: '/displaySettings'
      fullPath: '/register/displaySettings'
      preLoaderRoute: typeof RegisterDisplaySettingsImport
      parentRoute: typeof RegisterImport
    }
    '/register/personalInfo': {
      id: '/register/personalInfo'
      path: '/personalInfo'
      fullPath: '/register/personalInfo'
      preLoaderRoute: typeof RegisterPersonalInfoImport
      parentRoute: typeof RegisterImport
    }
  }
}

// Create and export the route tree

interface RegisterRouteChildren {
  RegisterCommunicationPreferencesRoute: typeof RegisterCommunicationPreferencesRoute
  RegisterContractRoute: typeof RegisterContractRoute
  RegisterDisplaySettingsRoute: typeof RegisterDisplaySettingsRoute
  RegisterPersonalInfoRoute: typeof RegisterPersonalInfoRoute
}

const RegisterRouteChildren: RegisterRouteChildren = {
  RegisterCommunicationPreferencesRoute: RegisterCommunicationPreferencesRoute,
  RegisterContractRoute: RegisterContractRoute,
  RegisterDisplaySettingsRoute: RegisterDisplaySettingsRoute,
  RegisterPersonalInfoRoute: RegisterPersonalInfoRoute,
}

const RegisterRouteWithChildren = RegisterRoute._addFileChildren(
  RegisterRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/quickList': typeof QuickListRoute
  '/register': typeof RegisterRouteWithChildren
  '/test': typeof TestRoute
  '/register/communicationPreferences': typeof RegisterCommunicationPreferencesRoute
  '/register/contract': typeof RegisterContractRoute
  '/register/displaySettings': typeof RegisterDisplaySettingsRoute
  '/register/personalInfo': typeof RegisterPersonalInfoRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/quickList': typeof QuickListRoute
  '/register': typeof RegisterRouteWithChildren
  '/test': typeof TestRoute
  '/register/communicationPreferences': typeof RegisterCommunicationPreferencesRoute
  '/register/contract': typeof RegisterContractRoute
  '/register/displaySettings': typeof RegisterDisplaySettingsRoute
  '/register/personalInfo': typeof RegisterPersonalInfoRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/quickList': typeof QuickListRoute
  '/register': typeof RegisterRouteWithChildren
  '/test': typeof TestRoute
  '/register/communicationPreferences': typeof RegisterCommunicationPreferencesRoute
  '/register/contract': typeof RegisterContractRoute
  '/register/displaySettings': typeof RegisterDisplaySettingsRoute
  '/register/personalInfo': typeof RegisterPersonalInfoRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/quickList'
    | '/register'
    | '/test'
    | '/register/communicationPreferences'
    | '/register/contract'
    | '/register/displaySettings'
    | '/register/personalInfo'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/quickList'
    | '/register'
    | '/test'
    | '/register/communicationPreferences'
    | '/register/contract'
    | '/register/displaySettings'
    | '/register/personalInfo'
  id:
    | '__root__'
    | '/'
    | '/quickList'
    | '/register'
    | '/test'
    | '/register/communicationPreferences'
    | '/register/contract'
    | '/register/displaySettings'
    | '/register/personalInfo'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  QuickListRoute: typeof QuickListRoute
  RegisterRoute: typeof RegisterRouteWithChildren
  TestRoute: typeof TestRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  QuickListRoute: QuickListRoute,
  RegisterRoute: RegisterRouteWithChildren,
  TestRoute: TestRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/quickList",
        "/register",
        "/test"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/quickList": {
      "filePath": "quickList.tsx"
    },
    "/register": {
      "filePath": "register.tsx",
      "children": [
        "/register/communicationPreferences",
        "/register/contract",
        "/register/displaySettings",
        "/register/personalInfo"
      ]
    },
    "/test": {
      "filePath": "test.tsx"
    },
    "/register/communicationPreferences": {
      "filePath": "register/communicationPreferences.tsx",
      "parent": "/register"
    },
    "/register/contract": {
      "filePath": "register/contract.tsx",
      "parent": "/register"
    },
    "/register/displaySettings": {
      "filePath": "register/displaySettings.tsx",
      "parent": "/register"
    },
    "/register/personalInfo": {
      "filePath": "register/personalInfo.tsx",
      "parent": "/register"
    }
  }
}
ROUTE_MANIFEST_END */
